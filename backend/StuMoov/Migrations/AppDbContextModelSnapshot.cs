// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StuMoov.Db;

#nullable disable

namespace StuMoov.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StuMoov.Models.BookingModel.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StorageLocationId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RenterId");

                    b.HasIndex("StorageLocationId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("StuMoov.Models.ChatModel.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("ChatSessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("StuMoov.Models.ChatModel.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("LenderId");

                    b.HasIndex("RenterId");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("StuMoov.Models.MessageModel.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("StuMoov.Models.PaymentModel.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountCharged")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AmountTransferred")
                        .HasColumnType("numeric");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PlatformFee")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StripeChargeId")
                        .HasColumnType("text");

                    b.Property<string>("StripePaymentIntentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StripeTransferId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("LenderId");

                    b.HasIndex("RenterId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("StuMoov.Models.StorageLocationModel.StorageLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Lat")
                        .HasColumnType("double precision");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uuid");

                    b.Property<double>("Lng")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("StorageHeight")
                        .HasColumnType("double precision");

                    b.Property<double>("StorageLength")
                        .HasColumnType("double precision");

                    b.Property<double>("StorageVolumeTotal")
                        .HasColumnType("double precision");

                    b.Property<double>("StorageWidth")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("LenderId");

                    b.ToTable("StorageLocations");
                });

            modelBuilder.Entity("StuMoov.Models.UserModel.StripeConnectAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountLinkUrl")
                        .HasColumnType("text");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("PayoutsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StripeConnectAccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StripeConnectAccounts");
                });

            modelBuilder.Entity("StuMoov.Models.UserModel.StripeCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultPaymentMethodId")
                        .HasColumnType("text");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StripeCustomers");
                });

            modelBuilder.Entity("StuMoov.Models.UserModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StuMoov.Models.UserModel.Lender", b =>
                {
                    b.HasBaseType("StuMoov.Models.UserModel.User");

                    b.Property<Guid?>("StripeConnectInfoId")
                        .HasColumnType("uuid");

                    b.HasIndex("StripeConnectInfoId");

                    b.HasDiscriminator().HasValue("LENDER");
                });

            modelBuilder.Entity("StuMoov.Models.UserModel.Renter", b =>
                {
                    b.HasBaseType("StuMoov.Models.UserModel.User");

                    b.Property<Guid?>("StripeCustomerInfoId")
                        .HasColumnType("uuid");

                    b.HasIndex("StripeCustomerInfoId");

                    b.HasDiscriminator().HasValue("RENTER");
                });

            modelBuilder.Entity("StuMoov.Models.BookingModel.Booking", b =>
                {
                    b.HasOne("StuMoov.Models.UserModel.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StuMoov.Models.StorageLocationModel.StorageLocation", "StorageLocation")
                        .WithMany()
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Renter");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("StuMoov.Models.ChatModel.ChatMessage", b =>
                {
                    b.HasOne("StuMoov.Models.ChatModel.ChatSession", "ChatSession")
                        .WithMany()
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StuMoov.Models.UserModel.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChatSession");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("StuMoov.Models.ChatModel.ChatSession", b =>
                {
                    b.HasOne("StuMoov.Models.BookingModel.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StuMoov.Models.UserModel.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StuMoov.Models.UserModel.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Lender");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("StuMoov.Models.PaymentModel.Payment", b =>
                {
                    b.HasOne("StuMoov.Models.BookingModel.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("StuMoov.Models.PaymentModel.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StuMoov.Models.UserModel.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StuMoov.Models.UserModel.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Lender");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("StuMoov.Models.StorageLocationModel.StorageLocation", b =>
                {
                    b.HasOne("StuMoov.Models.UserModel.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lender");
                });

            modelBuilder.Entity("StuMoov.Models.UserModel.StripeConnectAccount", b =>
                {
                    b.HasOne("StuMoov.Models.UserModel.Lender", "User")
                        .WithOne()
                        .HasForeignKey("StuMoov.Models.UserModel.StripeConnectAccount", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StuMoov.Models.UserModel.StripeCustomer", b =>
                {
                    b.HasOne("StuMoov.Models.UserModel.Renter", "User")
                        .WithOne()
                        .HasForeignKey("StuMoov.Models.UserModel.StripeCustomer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StuMoov.Models.UserModel.Lender", b =>
                {
                    b.HasOne("StuMoov.Models.UserModel.StripeConnectAccount", "StripeConnectInfo")
                        .WithMany()
                        .HasForeignKey("StripeConnectInfoId");

                    b.Navigation("StripeConnectInfo");
                });

            modelBuilder.Entity("StuMoov.Models.UserModel.Renter", b =>
                {
                    b.HasOne("StuMoov.Models.UserModel.StripeCustomer", "StripeCustomerInfo")
                        .WithMany()
                        .HasForeignKey("StripeCustomerInfoId");

                    b.Navigation("StripeCustomerInfo");
                });

            modelBuilder.Entity("StuMoov.Models.BookingModel.Booking", b =>
                {
                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
